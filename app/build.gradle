buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.7.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.apollographql.apollo'
apply plugin: 'jacoco'
apply from: 'quality.gradle'

def externalPrivateVersion = new File(project.rootDir.path + "/app/external_version_code.txt").text.trim().toInteger()
def externalPublicVersion = new File(project.rootDir.path + "/app/external_version_name.txt").text.trim()
def internalPrivateVersion = new File(project.rootDir.path + "/app/internal_version_code.txt").text.trim().toInteger()
def internalPublicVersion = new File(project.rootDir.path + "/app/internal_version_name.txt").text.trim()
def isCircle = "true" == System.getenv("CIRCLECI")
def isPrivateCIEnv = ("android-private" == System.getenv("CIRCLE_PROJECT_REPONAME"))
def isRelease = ("external" == System.getenv("CIRCLE_BRANCH"))

ext.signing = [
        storeFilePath: "path/to/keystore",
        storePassword: "keystore password",
        keyAlias     : "key alias",
        keyPassword  : "key password"
]

if (file('signing.gradle').exists()) {
    apply from: 'signing.gradle'
}

jacoco {
    toolVersion = "$jacoco_version"
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// Creates tasks based on the application build variant (productFlavor + buildType = variant)
android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def autoGenerated = ['**/R.class',
                         '**/R$*.class',
                         '**/Manifest*.*',
                         'android/**/*.*',
                         '**/BuildConfig.*',
                         '**/*$ViewBinder*.*',
                         '**/*$ViewInjector*.*',
                         '**/Lambda$*.class',
                         '**/Lambda.class',
                         '**/*Lambda.class',
                         '**/*Lambda*.class',
                         '**/*Dagger*.*',
                         '**/*_MembersInjector.class',
                         '**/Dagger*Component*.class',
                         '**/Dagger*Subcomponent*.class',
                         '**/*Subcomponent$Builder.class',
                         '**/*Module_*Factory.class',
                         '**/KSApplication.*',
                         '**/ApplicationModule.*',
                         '**/*Activity*.*',
                         '**/*Fragment*.*',
                         '**/*ViewHolder*.*',
                         '**/*Toolbar*.*',
                         '**/*Dialog*.*',
                         '**/ui/*.*',
                         '**/ui/views/*.*',
                         '**/databinding/*.*',
                         '**/mock/*.*',
                         '**/services/*.*',
                         '**/firebase/*.*',
                         '**/fragment/*.*']

    /**
     * Generates Jacoco coverage reports based off the unit tests.
     */
    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group 'Reporting'
        description "Generate ${variantName} Jacoco coverage reports."

        reports {
            xml.enabled = true
            html.enabled = true
        }

        // variant.javaCompile.source does not work
        // traverses from starting point
        sourceDirectories.from = files(android.sourceSets.main.java.srcDirs)
        executionData.from = files("${buildDir}/jacoco/test${variantName}UnitTest.exec")
        classDirectories.from = fileTree(dir: variant.javaCompileProvider.get().destinationDir, excludes: autoGenerated)
    }

}

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.kickstarter"
        minSdkVersion 23
        targetSdkVersion 30
        testApplicationId "com.kickstarter.internal.debug.test"
        testInstrumentationRunner "com.kickstarter.screenshoot.testing.KSScreenShotTestRunner"

        buildConfigField "String", "GIT_SHA", "\"${commitSha()}\""
        buildConfigField "String", "BUILD_DATE", "\"${buildDate()}\""

        // Enable Multidex to support over 65K methods
        multiDexEnabled true

        resConfigs "de", "es", "en", "fr", "ja"

        def fabricProps = new Properties()
        file("fabric.properties").withInputStream { fabricProps.load(it) }
        manifestPlaceholders = [apiKey: fabricProps.getProperty('apiKey'), performanceLogs: false]
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
        release {
            storeFile file(project.signing.storeFilePath)
            storePassword project.signing.storePassword
            keyAlias project.signing.keyAlias
            keyPassword project.signing.keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            if (isCircle && isPrivateCIEnv && isRelease) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
            testCoverageEnabled true
            FirebasePerformance {
                // Set this flag to 'false' to disable @AddTrace annotation processing and
                // automatic monitoring of HTTP/S network requests
                // for a specific build variant at compile time.
                instrumentationEnabled false
            }
        }
    }

    flavorDimensions "AUDIENCE"

    productFlavors {
        internal {
            dimension "AUDIENCE"
            applicationId "com.kickstarter.kickstarter.internal"
            versionCode internalPrivateVersion
            versionName internalPublicVersion
            manifestPlaceholders = [performanceLogs: false]
        }
        external {
            dimension "AUDIENCE"
            applicationId "com.kickstarter.kickstarter"
            versionCode externalPrivateVersion
            versionName externalPublicVersion
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
        useIR = true
    }

    buildFeatures {
        compose false
    }

    lintOptions {
        disable 'NonConstantResourceId'
        quiet true
        warningsAsErrors true
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    buildFeatures {
        viewBinding true
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if( names.contains("regression")) {
            setIgnore(true)
        }
    }

}

buildscript {
    repositories {
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.apollographql.apollo:apollo-gradle-plugin:2.3.0'
        classpath 'com.karumi:shot:5.11.0'
    }
}

apollo {
    customTypeMapping = [
            "Date" : "java.util.Date",
            "Email": "java.lang.String",
            "ISO8601DateTime" : "org.joda.time.DateTime",
            "DateTime" : "org.joda.time.DateTime"
    ]
}

repositories {
    // This is the only reference we cannot remove yet as it has not been migrated to mavenCentral() or google()
    // see - https://github.com/google/flexbox-layout/issues/566
    jcenter()
    maven {
        url 'https://maven.google.com'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.browser:browser:1.3.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.work:work-runtime-ktx:2.6.0-beta01'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation 'com.apollographql.apollo:apollo-runtime:2.3.0'
    implementation 'com.facebook.android:facebook-android-sdk:7.1.0'
    final auto_parcel_version = "0.3.1"
    implementation "com.github.frankiesardo:auto-parcel:$auto_parcel_version"
    kapt "com.github.frankiesardo:auto-parcel-processor:$auto_parcel_version"
    implementation "com.google.android.gms:play-services-wallet:18.1.3"
    implementation "com.google.android.exoplayer:exoplayer:2.15.0"
    implementation 'com.google.android:flexbox:1.1.0'
    implementation 'com.google.android.material:material:1.5.0-alpha01'
    final dagger_version = "2.37"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.jakewharton:process-phoenix:2.0.0"
    final rx_binding_version = "0.4.0"
    implementation "com.jakewharton.rxbinding:rxbinding:$rx_binding_version"
    implementation "com.jakewharton.rxbinding:rxbinding-recyclerview-v7:$rx_binding_version"
    implementation "com.jakewharton.rxbinding:rxbinding-support-v4:$rx_binding_version"
    implementation "com.jakewharton.timber:timber:4.7.1"
    implementation 'com.optimizely.ab:android-sdk:3.10.1'
    implementation 'com.qualtrics:digital:1.3'
    implementation "com.stripe:stripe-android:16.10.0"
    final okhttp_version = "4.8.+"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okhttp_version"

    final retrofit_version = "2.9.+"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    final rx_lifecycle_version = "0.3.0"
    implementation "com.trello:rxlifecycle:$rx_lifecycle_version"
    implementation "com.trello:rxlifecycle-components:$rx_lifecycle_version"
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation "io.reactivex:rxjava:1.3.8"
    implementation "net.danlew:android.joda:2.10.7"
    implementation "org.jsoup:jsoup:1.12.1"

    // Analytics Segment-Braze
    implementation 'com.segment.analytics.android:analytics:4.9.4'
    implementation 'com.appboy:appboy-segment-integration:8.0.2'

    // Security
    implementation 'com.perimeterx.sdk:msdk:1.13.1'

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:26.7.0')
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-perf-ktx'
    implementation "com.google.firebase:firebase-messaging"
    implementation 'com.google.firebase:firebase-inappmessaging-display'

    // Testing
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-core:3.6.0"
    testImplementation "org.robolectric:robolectric:4.4"
    testImplementation "org.robolectric:shadows-multidex:4.4"
    testImplementation "androidx.test:core:1.3.0"
    androidTestImplementation 'androidx.annotation:annotation:1.2.0'

    def espresso = '3.2.0'
    androidTestImplementation ('androidx.test.espresso:espresso-contrib:' + espresso) {
        exclude module: "protobuf-lite"
    }
    androidTestImplementation 'androidx.test.espresso:espresso-core:' + espresso
    androidTestImplementation 'androidx.test.espresso:espresso-intents:' + espresso
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation 'androidx.test:rules:1.3.0'
}

// SHA and timestamp caching courtesy of https://github.com/gdg-x/frisbee/blob/develop/app/build.gradle#L193-L218
def commitSha() {
    def file = new File(project.buildDir, "commit-sha.txt")
    if (file.exists()) {
        return file.text
    }

    def value = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

    file.parentFile.mkdirs()
    file.text = value
    return value
}

def buildDate() {
    def file = new File(project.buildDir, "build-date.txt")

    def date = new Date()
    def value = date.format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))

    file.parentFile.mkdirs()
    file.text = value
    return value
}

// Copy google-services.json from variant directory to root of app
gradle.taskGraph.beforeTask { Task task ->
    if (task.name ==~ /process.*GoogleServices/) {
        android.applicationVariants.all { variant ->
            if (task.name ==~ /(?i)process${variant.name}GoogleServices/) {
                copy {
                    from "src/${variant.name}"
                    into '.'
                    include 'google-services.json'
                }
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'

apply plugin: 'shot'
shot {
    useComposer = false
}